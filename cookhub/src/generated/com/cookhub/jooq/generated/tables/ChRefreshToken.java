/*
 * This file is generated by jOOQ.
 */
package com.cookhub.jooq.generated.tables;


import com.cookhub.jooq.generated.Jominjong;
import com.cookhub.jooq.generated.Keys;
import com.cookhub.jooq.generated.tables.records.ChRefreshTokenRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChRefreshToken extends TableImpl<ChRefreshTokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jominjong.CH_REFRESH_TOKEN</code>
     */
    public static final ChRefreshToken CH_REFRESH_TOKEN = new ChRefreshToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChRefreshTokenRecord> getRecordType() {
        return ChRefreshTokenRecord.class;
    }

    /**
     * The column <code>jominjong.CH_REFRESH_TOKEN.RT_ID</code>.
     */
    public final TableField<ChRefreshTokenRecord, Long> RT_ID = createField(DSL.name("RT_ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>jominjong.CH_REFRESH_TOKEN.USER_NO</code>.
     */
    public final TableField<ChRefreshTokenRecord, Integer> USER_NO = createField(DSL.name("USER_NO"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jominjong.CH_REFRESH_TOKEN.REFRESH_TOKEN</code>.
     */
    public final TableField<ChRefreshTokenRecord, String> REFRESH_TOKEN = createField(DSL.name("REFRESH_TOKEN"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>jominjong.CH_REFRESH_TOKEN.ISSUED_AT</code>.
     */
    public final TableField<ChRefreshTokenRecord, LocalDateTime> ISSUED_AT = createField(DSL.name("ISSUED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>jominjong.CH_REFRESH_TOKEN.EXPIRED_AT</code>.
     */
    public final TableField<ChRefreshTokenRecord, LocalDateTime> EXPIRED_AT = createField(DSL.name("EXPIRED_AT"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    private ChRefreshToken(Name alias, Table<ChRefreshTokenRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ChRefreshToken(Name alias, Table<ChRefreshTokenRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>jominjong.CH_REFRESH_TOKEN</code> table reference
     */
    public ChRefreshToken(String alias) {
        this(DSL.name(alias), CH_REFRESH_TOKEN);
    }

    /**
     * Create an aliased <code>jominjong.CH_REFRESH_TOKEN</code> table reference
     */
    public ChRefreshToken(Name alias) {
        this(alias, CH_REFRESH_TOKEN);
    }

    /**
     * Create a <code>jominjong.CH_REFRESH_TOKEN</code> table reference
     */
    public ChRefreshToken() {
        this(DSL.name("CH_REFRESH_TOKEN"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Jominjong.JOMINJONG;
    }

    @Override
    public Identity<ChRefreshTokenRecord, Long> getIdentity() {
        return (Identity<ChRefreshTokenRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChRefreshTokenRecord> getPrimaryKey() {
        return Keys.KEY_CH_REFRESH_TOKEN_PRIMARY;
    }

    @Override
    public ChRefreshToken as(String alias) {
        return new ChRefreshToken(DSL.name(alias), this);
    }

    @Override
    public ChRefreshToken as(Name alias) {
        return new ChRefreshToken(alias, this);
    }

    @Override
    public ChRefreshToken as(Table<?> alias) {
        return new ChRefreshToken(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChRefreshToken rename(String name) {
        return new ChRefreshToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChRefreshToken rename(Name name) {
        return new ChRefreshToken(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChRefreshToken rename(Table<?> name) {
        return new ChRefreshToken(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChRefreshToken where(Condition condition) {
        return new ChRefreshToken(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChRefreshToken where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChRefreshToken where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChRefreshToken where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChRefreshToken where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChRefreshToken where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChRefreshToken where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChRefreshToken where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChRefreshToken whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChRefreshToken whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
