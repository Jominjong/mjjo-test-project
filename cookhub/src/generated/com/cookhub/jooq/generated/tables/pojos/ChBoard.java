/*
 * This file is generated by jOOQ.
 */
package com.cookhub.jooq.generated.tables.pojos;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.io.Serializable;
import java.time.LocalDateTime;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChBoard implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Integer boardNo;
    private final Integer userNo;
    private final String boardTitle;
    private final String boardCon;
    private final LocalDateTime createdAt;
    private final LocalDateTime updatedAt;
    private final Integer cgNo;

    public ChBoard(ChBoard value) {
        this.boardNo = value.boardNo;
        this.userNo = value.userNo;
        this.boardTitle = value.boardTitle;
        this.boardCon = value.boardCon;
        this.createdAt = value.createdAt;
        this.updatedAt = value.updatedAt;
        this.cgNo = value.cgNo;
    }

    public ChBoard(
        Integer boardNo,
        Integer userNo,
        String boardTitle,
        String boardCon,
        LocalDateTime createdAt,
        LocalDateTime updatedAt,
        Integer cgNo
    ) {
        this.boardNo = boardNo;
        this.userNo = userNo;
        this.boardTitle = boardTitle;
        this.boardCon = boardCon;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.cgNo = cgNo;
    }

    /**
     * Getter for <code>jominjong.CH_BOARD.BOARD_NO</code>.
     */
    public Integer getBoardNo() {
        return this.boardNo;
    }

    /**
     * Getter for <code>jominjong.CH_BOARD.USER_NO</code>.
     */
    @NotNull
    public Integer getUserNo() {
        return this.userNo;
    }

    /**
     * Getter for <code>jominjong.CH_BOARD.BOARD_TITLE</code>.
     */
    @NotNull
    @Size(max = 256)
    public String getBoardTitle() {
        return this.boardTitle;
    }

    /**
     * Getter for <code>jominjong.CH_BOARD.BOARD_CON</code>.
     */
    @Size(max = 65535)
    public String getBoardCon() {
        return this.boardCon;
    }

    /**
     * Getter for <code>jominjong.CH_BOARD.CREATED_AT</code>.
     */
    @NotNull
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Getter for <code>jominjong.CH_BOARD.UPDATED_AT</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Getter for <code>jominjong.CH_BOARD.CG_NO</code>.
     */
    @NotNull
    public Integer getCgNo() {
        return this.cgNo;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final ChBoard other = (ChBoard) obj;
        if (this.boardNo == null) {
            if (other.boardNo != null)
                return false;
        }
        else if (!this.boardNo.equals(other.boardNo))
            return false;
        if (this.userNo == null) {
            if (other.userNo != null)
                return false;
        }
        else if (!this.userNo.equals(other.userNo))
            return false;
        if (this.boardTitle == null) {
            if (other.boardTitle != null)
                return false;
        }
        else if (!this.boardTitle.equals(other.boardTitle))
            return false;
        if (this.boardCon == null) {
            if (other.boardCon != null)
                return false;
        }
        else if (!this.boardCon.equals(other.boardCon))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.cgNo == null) {
            if (other.cgNo != null)
                return false;
        }
        else if (!this.cgNo.equals(other.cgNo))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.boardNo == null) ? 0 : this.boardNo.hashCode());
        result = prime * result + ((this.userNo == null) ? 0 : this.userNo.hashCode());
        result = prime * result + ((this.boardTitle == null) ? 0 : this.boardTitle.hashCode());
        result = prime * result + ((this.boardCon == null) ? 0 : this.boardCon.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.cgNo == null) ? 0 : this.cgNo.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ChBoard (");

        sb.append(boardNo);
        sb.append(", ").append(userNo);
        sb.append(", ").append(boardTitle);
        sb.append(", ").append(boardCon);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(cgNo);

        sb.append(")");
        return sb.toString();
    }
}
