/*
 * This file is generated by jOOQ.
 */
package com.cookhub.jooq.generated.tables;


import com.cookhub.jooq.generated.Jominjong;
import com.cookhub.jooq.generated.Keys;
import com.cookhub.jooq.generated.tables.records.ChBoardRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChBoard extends TableImpl<ChBoardRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jominjong.CH_BOARD</code>
     */
    public static final ChBoard CH_BOARD = new ChBoard();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChBoardRecord> getRecordType() {
        return ChBoardRecord.class;
    }

    /**
     * The column <code>jominjong.CH_BOARD.BOARD_NO</code>.
     */
    public final TableField<ChBoardRecord, Integer> BOARD_NO = createField(DSL.name("BOARD_NO"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>jominjong.CH_BOARD.USER_NO</code>.
     */
    public final TableField<ChBoardRecord, Integer> USER_NO = createField(DSL.name("USER_NO"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jominjong.CH_BOARD.BOARD_TITLE</code>.
     */
    public final TableField<ChBoardRecord, String> BOARD_TITLE = createField(DSL.name("BOARD_TITLE"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>jominjong.CH_BOARD.BOARD_CON</code>.
     */
    public final TableField<ChBoardRecord, String> BOARD_CON = createField(DSL.name("BOARD_CON"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>jominjong.CH_BOARD.CREATED_AT</code>.
     */
    public final TableField<ChBoardRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>jominjong.CH_BOARD.UPDATED_AT</code>.
     */
    public final TableField<ChBoardRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>jominjong.CH_BOARD.CG_NO</code>.
     */
    public final TableField<ChBoardRecord, Integer> CG_NO = createField(DSL.name("CG_NO"), SQLDataType.INTEGER.nullable(false), this, "");

    private ChBoard(Name alias, Table<ChBoardRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ChBoard(Name alias, Table<ChBoardRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>jominjong.CH_BOARD</code> table reference
     */
    public ChBoard(String alias) {
        this(DSL.name(alias), CH_BOARD);
    }

    /**
     * Create an aliased <code>jominjong.CH_BOARD</code> table reference
     */
    public ChBoard(Name alias) {
        this(alias, CH_BOARD);
    }

    /**
     * Create a <code>jominjong.CH_BOARD</code> table reference
     */
    public ChBoard() {
        this(DSL.name("CH_BOARD"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Jominjong.JOMINJONG;
    }

    @Override
    public Identity<ChBoardRecord, Integer> getIdentity() {
        return (Identity<ChBoardRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChBoardRecord> getPrimaryKey() {
        return Keys.KEY_CH_BOARD_PRIMARY;
    }

    @Override
    public ChBoard as(String alias) {
        return new ChBoard(DSL.name(alias), this);
    }

    @Override
    public ChBoard as(Name alias) {
        return new ChBoard(alias, this);
    }

    @Override
    public ChBoard as(Table<?> alias) {
        return new ChBoard(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChBoard rename(String name) {
        return new ChBoard(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChBoard rename(Name name) {
        return new ChBoard(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChBoard rename(Table<?> name) {
        return new ChBoard(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChBoard where(Condition condition) {
        return new ChBoard(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChBoard where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChBoard where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChBoard where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChBoard where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChBoard where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChBoard where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChBoard where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChBoard whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChBoard whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
