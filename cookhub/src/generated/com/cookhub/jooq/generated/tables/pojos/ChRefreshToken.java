/*
 * This file is generated by jOOQ.
 */
package com.cookhub.jooq.generated.tables.pojos;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.io.Serializable;
import java.time.LocalDateTime;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChRefreshToken implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Long rtId;
    private final Integer userNo;
    private final String refreshToken;
    private final LocalDateTime issuedAt;
    private final LocalDateTime expiredAt;

    public ChRefreshToken(ChRefreshToken value) {
        this.rtId = value.rtId;
        this.userNo = value.userNo;
        this.refreshToken = value.refreshToken;
        this.issuedAt = value.issuedAt;
        this.expiredAt = value.expiredAt;
    }

    public ChRefreshToken(
        Long rtId,
        Integer userNo,
        String refreshToken,
        LocalDateTime issuedAt,
        LocalDateTime expiredAt
    ) {
        this.rtId = rtId;
        this.userNo = userNo;
        this.refreshToken = refreshToken;
        this.issuedAt = issuedAt;
        this.expiredAt = expiredAt;
    }

    /**
     * Getter for <code>jominjong.CH_REFRESH_TOKEN.RT_ID</code>.
     */
    public Long getRtId() {
        return this.rtId;
    }

    /**
     * Getter for <code>jominjong.CH_REFRESH_TOKEN.USER_NO</code>.
     */
    @NotNull
    public Integer getUserNo() {
        return this.userNo;
    }

    /**
     * Getter for <code>jominjong.CH_REFRESH_TOKEN.REFRESH_TOKEN</code>.
     */
    @NotNull
    @Size(max = 512)
    public String getRefreshToken() {
        return this.refreshToken;
    }

    /**
     * Getter for <code>jominjong.CH_REFRESH_TOKEN.ISSUED_AT</code>.
     */
    @NotNull
    public LocalDateTime getIssuedAt() {
        return this.issuedAt;
    }

    /**
     * Getter for <code>jominjong.CH_REFRESH_TOKEN.EXPIRED_AT</code>.
     */
    public LocalDateTime getExpiredAt() {
        return this.expiredAt;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final ChRefreshToken other = (ChRefreshToken) obj;
        if (this.rtId == null) {
            if (other.rtId != null)
                return false;
        }
        else if (!this.rtId.equals(other.rtId))
            return false;
        if (this.userNo == null) {
            if (other.userNo != null)
                return false;
        }
        else if (!this.userNo.equals(other.userNo))
            return false;
        if (this.refreshToken == null) {
            if (other.refreshToken != null)
                return false;
        }
        else if (!this.refreshToken.equals(other.refreshToken))
            return false;
        if (this.issuedAt == null) {
            if (other.issuedAt != null)
                return false;
        }
        else if (!this.issuedAt.equals(other.issuedAt))
            return false;
        if (this.expiredAt == null) {
            if (other.expiredAt != null)
                return false;
        }
        else if (!this.expiredAt.equals(other.expiredAt))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.rtId == null) ? 0 : this.rtId.hashCode());
        result = prime * result + ((this.userNo == null) ? 0 : this.userNo.hashCode());
        result = prime * result + ((this.refreshToken == null) ? 0 : this.refreshToken.hashCode());
        result = prime * result + ((this.issuedAt == null) ? 0 : this.issuedAt.hashCode());
        result = prime * result + ((this.expiredAt == null) ? 0 : this.expiredAt.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ChRefreshToken (");

        sb.append(rtId);
        sb.append(", ").append(userNo);
        sb.append(", ").append(refreshToken);
        sb.append(", ").append(issuedAt);
        sb.append(", ").append(expiredAt);

        sb.append(")");
        return sb.toString();
    }
}
