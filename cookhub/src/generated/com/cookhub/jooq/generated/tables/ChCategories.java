/*
 * This file is generated by jOOQ.
 */
package com.cookhub.jooq.generated.tables;


import com.cookhub.jooq.generated.Jominjong;
import com.cookhub.jooq.generated.Keys;
import com.cookhub.jooq.generated.tables.records.ChCategoriesRecord;

import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChCategories extends TableImpl<ChCategoriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jominjong.CH_CATEGORIES</code>
     */
    public static final ChCategories CH_CATEGORIES = new ChCategories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChCategoriesRecord> getRecordType() {
        return ChCategoriesRecord.class;
    }

    /**
     * The column <code>jominjong.CH_CATEGORIES.CG_NO</code>.
     */
    public final TableField<ChCategoriesRecord, Integer> CG_NO = createField(DSL.name("CG_NO"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>jominjong.CH_CATEGORIES.CG_NAME</code>.
     */
    public final TableField<ChCategoriesRecord, String> CG_NAME = createField(DSL.name("CG_NAME"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    private ChCategories(Name alias, Table<ChCategoriesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ChCategories(Name alias, Table<ChCategoriesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>jominjong.CH_CATEGORIES</code> table reference
     */
    public ChCategories(String alias) {
        this(DSL.name(alias), CH_CATEGORIES);
    }

    /**
     * Create an aliased <code>jominjong.CH_CATEGORIES</code> table reference
     */
    public ChCategories(Name alias) {
        this(alias, CH_CATEGORIES);
    }

    /**
     * Create a <code>jominjong.CH_CATEGORIES</code> table reference
     */
    public ChCategories() {
        this(DSL.name("CH_CATEGORIES"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Jominjong.JOMINJONG;
    }

    @Override
    public Identity<ChCategoriesRecord, Integer> getIdentity() {
        return (Identity<ChCategoriesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChCategoriesRecord> getPrimaryKey() {
        return Keys.KEY_CH_CATEGORIES_PRIMARY;
    }

    @Override
    public ChCategories as(String alias) {
        return new ChCategories(DSL.name(alias), this);
    }

    @Override
    public ChCategories as(Name alias) {
        return new ChCategories(alias, this);
    }

    @Override
    public ChCategories as(Table<?> alias) {
        return new ChCategories(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChCategories rename(String name) {
        return new ChCategories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChCategories rename(Name name) {
        return new ChCategories(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChCategories rename(Table<?> name) {
        return new ChCategories(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChCategories where(Condition condition) {
        return new ChCategories(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChCategories where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChCategories where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChCategories where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChCategories where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChCategories where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChCategories where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChCategories where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChCategories whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChCategories whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
