/*
 * This file is generated by jOOQ.
 */
package com.cookhub.jooq.generated.tables;


import com.cookhub.jooq.generated.Jominjong;
import com.cookhub.jooq.generated.Keys;
import com.cookhub.jooq.generated.tables.records.ChUsersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChUsers extends TableImpl<ChUsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jominjong.CH_USERS</code>
     */
    public static final ChUsers CH_USERS = new ChUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChUsersRecord> getRecordType() {
        return ChUsersRecord.class;
    }

    /**
     * The column <code>jominjong.CH_USERS.USER_NO</code>.
     */
    public final TableField<ChUsersRecord, Integer> USER_NO = createField(DSL.name("USER_NO"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>jominjong.CH_USERS.USER_EMAIL</code>.
     */
    public final TableField<ChUsersRecord, String> USER_EMAIL = createField(DSL.name("USER_EMAIL"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>jominjong.CH_USERS.USER_PW</code>.
     */
    public final TableField<ChUsersRecord, String> USER_PW = createField(DSL.name("USER_PW"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>jominjong.CH_USERS.USER_NAME</code>.
     */
    public final TableField<ChUsersRecord, String> USER_NAME = createField(DSL.name("USER_NAME"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>jominjong.CH_USERS.DELETED_AT</code>.
     */
    public final TableField<ChUsersRecord, LocalDateTime> DELETED_AT = createField(DSL.name("DELETED_AT"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    private ChUsers(Name alias, Table<ChUsersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ChUsers(Name alias, Table<ChUsersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>jominjong.CH_USERS</code> table reference
     */
    public ChUsers(String alias) {
        this(DSL.name(alias), CH_USERS);
    }

    /**
     * Create an aliased <code>jominjong.CH_USERS</code> table reference
     */
    public ChUsers(Name alias) {
        this(alias, CH_USERS);
    }

    /**
     * Create a <code>jominjong.CH_USERS</code> table reference
     */
    public ChUsers() {
        this(DSL.name("CH_USERS"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Jominjong.JOMINJONG;
    }

    @Override
    public Identity<ChUsersRecord, Integer> getIdentity() {
        return (Identity<ChUsersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChUsersRecord> getPrimaryKey() {
        return Keys.KEY_CH_USERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ChUsersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CH_USERS_USER_EMAIL);
    }

    @Override
    public ChUsers as(String alias) {
        return new ChUsers(DSL.name(alias), this);
    }

    @Override
    public ChUsers as(Name alias) {
        return new ChUsers(alias, this);
    }

    @Override
    public ChUsers as(Table<?> alias) {
        return new ChUsers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChUsers rename(String name) {
        return new ChUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChUsers rename(Name name) {
        return new ChUsers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChUsers rename(Table<?> name) {
        return new ChUsers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChUsers where(Condition condition) {
        return new ChUsers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChUsers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChUsers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChUsers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChUsers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChUsers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChUsers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChUsers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChUsers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChUsers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
