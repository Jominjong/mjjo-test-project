/*
 * This file is generated by jOOQ.
 */
package com.cookhub.jooq.generated.tables.records;


import com.cookhub.jooq.generated.tables.ChRefreshToken;

import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChRefreshTokenRecord extends UpdatableRecordImpl<ChRefreshTokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>jominjong.CH_REFRESH_TOKEN.RT_ID</code>.
     */
    public ChRefreshTokenRecord setRtId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>jominjong.CH_REFRESH_TOKEN.RT_ID</code>.
     */
    public Long getRtId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>jominjong.CH_REFRESH_TOKEN.USER_NO</code>.
     */
    public ChRefreshTokenRecord setUserNo(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>jominjong.CH_REFRESH_TOKEN.USER_NO</code>.
     */
    @NotNull
    public Integer getUserNo() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>jominjong.CH_REFRESH_TOKEN.REFRESH_TOKEN</code>.
     */
    public ChRefreshTokenRecord setRefreshToken(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>jominjong.CH_REFRESH_TOKEN.REFRESH_TOKEN</code>.
     */
    @NotNull
    @Size(max = 512)
    public String getRefreshToken() {
        return (String) get(2);
    }

    /**
     * Setter for <code>jominjong.CH_REFRESH_TOKEN.ISSUED_AT</code>.
     */
    public ChRefreshTokenRecord setIssuedAt(LocalDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>jominjong.CH_REFRESH_TOKEN.ISSUED_AT</code>.
     */
    @NotNull
    public LocalDateTime getIssuedAt() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>jominjong.CH_REFRESH_TOKEN.EXPIRED_AT</code>.
     */
    public ChRefreshTokenRecord setExpiredAt(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>jominjong.CH_REFRESH_TOKEN.EXPIRED_AT</code>.
     */
    public LocalDateTime getExpiredAt() {
        return (LocalDateTime) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ChRefreshTokenRecord
     */
    public ChRefreshTokenRecord() {
        super(ChRefreshToken.CH_REFRESH_TOKEN);
    }

    /**
     * Create a detached, initialised ChRefreshTokenRecord
     */
    public ChRefreshTokenRecord(Long rtId, Integer userNo, String refreshToken, LocalDateTime issuedAt, LocalDateTime expiredAt) {
        super(ChRefreshToken.CH_REFRESH_TOKEN);

        setRtId(rtId);
        setUserNo(userNo);
        setRefreshToken(refreshToken);
        setIssuedAt(issuedAt);
        setExpiredAt(expiredAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ChRefreshTokenRecord
     */
    public ChRefreshTokenRecord(com.cookhub.jooq.generated.tables.pojos.ChRefreshToken value) {
        super(ChRefreshToken.CH_REFRESH_TOKEN);

        if (value != null) {
            setRtId(value.getRtId());
            setUserNo(value.getUserNo());
            setRefreshToken(value.getRefreshToken());
            setIssuedAt(value.getIssuedAt());
            setExpiredAt(value.getExpiredAt());
            resetChangedOnNotNull();
        }
    }
}
